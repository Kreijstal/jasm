package com.roscopeco.jasm

internal object LiteralNames {
    internal fun unescape(name: String): String =
        name.replace(LITERAL_NAME_REGEX, "$1")

    internal fun escape(name: String): String {
        return if (name.contains(' ') || name.matches(SPECIAL_CHAR_REGEX) || KEYWORDS.contains(name)) {
            "`${name.replace("`", "``")}`"
        } else {
            name
        }
    }

    internal fun escapeMethodName(name: String): String {
        if (name == "<init>" || name == "<clinit>") {
            // special case
            return name;
        }

        return if (name.contains(' ') || name.matches(SPECIAL_CHAR_REGEX) || KEYWORDS.contains(name)) {
            "`${name.replace("`", "``")}`"
        } else {
            name
        }
    }

    private val LITERAL_NAME_REGEX = Regex("`(?:([^`])|$)")

    private val SPECIAL_CHAR_REGEX = Regex("[(){}\\[\\].-;:,=\"*'`]")

    private val KEYWORDS = listOf(
        "class",
        "extends",
        "implements",
        "abstract",
        "annotation",
        "bridge",
        "deprecated",
        "enum",
        "final",
        "interface",
        "native",
        "private",
        "protected",
        "public",
        "record",
        "static",
        "strict",
        "super",
        "synchronized",
        "synthetic",
        "transient",
        "varargs",
        "volatile",
        "<init>",
        "<clinit>",
        "aaload",
        "aastore",
        "aconst_null",
        "aload",
        "anewarray",
        "areturn",
        "arraylength",
        "astore",
        "athrow",
        "baload",
        "bastore",
        "bipush",
        "caload",
        "castore",
        "checkcast",
        "d2f",
        "d2i",
        "d2l",
        "dadd",
        "daload",
        "dastore",
        "dcmpg",
        "dcmpl",
        "dconst",
        "ddiv",
        "dload",
        "dmul",
        "dneg",
        "drem",
        "dreturn",
        "dstore",
        "dsub",
        "dup",
        "dup_x1",
        "dup_x2",
        "dup2",
        "dup2_x1",
        "dup2_x2",
        "f2d",
        "f2i",
        "f2l",
        "fadd",
        "faload",
        "fastore",
        "fcmpg",
        "fcmpl",
        "fconst",
        "fdiv",
        "fload",
        "fmul",
        "fneg",
        "frem",
        "freturn",
        "fsub",
        "fstore",
        "getfield",
        "getstatic",
        "goto",
        "i2b",
        "i2c",
        "i2d",
        "i2f",
        "i2l",
        "i2s",
        "iadd",
        "iaload",
        "iand",
        "iastore",
        "iconst",
        "idiv",
        "if_acmpeq",
        "if_acmpne",
        "if_icmpeq",
        "if_icmpgt",
        "if_icmple",
        "if_icmplt",
        "if_icmpge",
        "if_icmpne",
        "ifeq",
        "ifgt",
        "ifle",
        "iflt",
        "ifge",
        "ifne",
        "ifnonnull",
        "ifnull",
        "iinc",
        "iload",
        "imul",
        "ineg",
        "instanceof",
        "invokedynamic",
        "invokeinterface",
        "invokespecial",
        "invokestatic",
        "invokevirtual",
        "ior",
        "irem",
        "ireturn",
        "ishl",
        "ishr",
        "istore",
        "isub",
        "iushr",
        "ixor",
        "jsr",
        "l2d",
        "l2f",
        "l2i",
        "ladd",
        "laload",
        "land",
        "lastore",
        "lcmp",
        "lconst",
        "ldc",
        "ldiv",
        "lload",
        "lmul",
        "lneg",
        "lookupswitch",
        "lor",
        "lrem",
        "lreturn",
        "lshl",
        "lshr",
        "lstore",
        "lsub",
        "lushr",
        "lxor",
        "monitorenter",
        "monitorexit",
        "multianewarray",
        "new",
        "newarray",
        "nop",
        "pop",
        "pop2",
        "putfield",
        "putstatic",
        "return",
        "ret",
        "saload",
        "sastore",
        "sipush",
        "swap",
        "tableswitch",
        "newinvokespecial",
        "constdynamic",
        "try",
        "catch",
        "exception",
        "V",
        "void",
        "B",
        "byte",
        "C",
        "char",
        "D",
        "double",
        "F",
        "float",
        "I",
        "int",
        "J",
        "long",
        "S",
        "short",
        "Z",
        "boolean",
        "true",
        "false"
    )
}